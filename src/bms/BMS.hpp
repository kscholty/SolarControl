/*
 * \brief Header file for BMS class
 * \author rahmaevao
 * \version 0.1
 * \date November 2018
 */
#if IGNORE
#ifndef BMS_HPP_
#define BMS_HPP_

#include "stm32f3xx_hal.h"
#include "cmsis_os.h"
#include "string.h"

/* \defgroup BMS_STATUS BMS protection status masks
*  @{
*/
#define BMS_STATUS_OK				0
#define BMS_STATUS_CELL_OVP			1
#define BMS_STATUS_CELL_UVP			2		///< Power off
#define BMS_STATUS_PACK_OVP			4
#define BMS_STATUS_PACK_UVP			8		///< Power off
#define BMS_STATUS_CHG_OTP			16
#define BMS_STATUS_CHG_UTP			32
#define BMS_STATUS_DSG_OTP			64		///< Power off
#define BMS_STATUS_DSG_UTP			128		///< Power off
#define BMS_STATUS_CHG_OCP			256
#define BMS_STATUS_DSG_OCP			512		///< Power off
#define BMS_STATUS_SHORT_CIRCOUT	1024	///< Power off
#define BMS_STATUS_AFE_ERROR		2048
#define BMS_STATUS_SOFT_LOCK		4096
#define BMS_STATUS_CHGOVERTIME		8192
#define BMS_STATUS_DSGOVERTIME		16384	///< Power off
/* @} */

extern HAL_StatusTypeDef bufferHalStatus;
extern uint8_t lenRequestMessage;
extern uint8_t * requestMessage;
extern uint16_t lenDmaBuffer;
extern uint8_t * dmaBuffer;
extern UART_HandleTypeDef huartBMS;
extern UART_HandleTypeDef huartMTI;
extern TIM_HandleTypeDef htim6;


/**
 * \brief Structure for exchanging information with BMS
 */
struct BmsData {
	HAL_StatusTypeDef halStatus;	///< Last read status:
									// HAL_OK
									// HAL_ERROR - Message is found, but check
									// sum is not correct;
									// HAL_BUSY - Message in buffer not found;
									// HAL_TIMEOUT - timeout UART bus.
	int16_t current;				///< Consumption current [mA]
	uint8_t chargePercentage;		///< Charge percentage [%]
	uint16_t protectionState;		///< Array of protection status
									// (JBD only. see defgroup BMS_STATUS)
};

/**
 * \brief The structure of the logs of the BMS itself
 *
 * Error counter. For Tiny error count have are marker
 *
 * Note №1 - Tiny BMS not different betwen errors over heat in charge process
 *		and discharge process. So in parsing tiny logs error over temperature
 * 		set in two field.
 */
struct BmsLogs {
	HAL_StatusTypeDef halStatus;
	uint16_t ShortCurrentCounter;
	uint16_t ChargeOverCurrentCounter; //tiny too
	uint16_t DischargeOverCurrentCounter; //tiny too
	uint16_t CellOverVoltgaeCurrentCounter;
	uint16_t CellUnderVoltageCounter;
	uint16_t ChargeOverTemperatureCounter; //tiny too see note №1 above
	uint16_t ChargeUnderTemperatureCounter;
	uint16_t DischargeOverTemperatureCounter; //tiny too see note №1 above
	uint16_t DischargeUnderTemperatureCounter;
	uint16_t PackOverVoltageCounter; //tiny too
	uint16_t PackUnderVoltageCounter; //tiny too
};

/* Table of CRC values for high–order byte */
static unsigned char auchCRCHi[] = {
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40
} ;

/* Table of CRC values for low–order byte */
static char auchCRCLo[] = {
0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
0x40
} ;

/**
 * \brief Class for working with BMS, which are compatible with the program
 * JBDTOOLS, and with TinyBMS from Litva
 *
 * The sequence of work with the class:
 * 1. Create instances of this class, BmsLogs structure and the BmsData
 * structure;
 * 2. Request logs to verify that the last time the power outage was incorrect.
 * 3. Start Automatic request mode (method autoSenderModeEnable).
 * 4. Read and use BmsData data by executing method readBmsData().
 *
 * \todo Move extern varibles in constructor.
 *
 * \ warning Adout JBD: maximum frequency (min time) data: 22.7 Hz(43.87 ms).
 * There are brakes due to the work of the BMS itself (she didn’t put a trip
 * to DMA UART communication.
 * Probability is that the update data in the BMS itself
 * occurs with a frequency (period) of 5 Hz (200 ms).
*/
class BMS {
public:
	BMS();
	BmsLogs readBmsLogs(void);
	void autoSenderModeEnable(void);
	BmsData readBmsData(void);



private:

	/**
	 * \brief Values ​​of message parts
	 */
	enum BmsMessageNode {
		GLOBAL = 0x03U, ///< Request for general battery data
		REQ_LOGS_JBD = 0xAAU, ///< Error log request
		START_BYTE_JBD = 0xDDU,
		START_BYTE_TINY = 0xAAU,
		READ = 0xA5U,
		WRITE = 0x5AU,
		ENDLER = 'w'
	};

	enum TypeBms {
		jbdChina,
		tinyBms
	};

	enum TypeMessageBms {
		GLOBAL_MESSAGE, ///< Requst global data from TinyBMS (reg 0-99)
		LOGS_MESSAGE ///< Requst counter error from TinyBMS (reg 105-108)
	};

	DMA_HandleTypeDef hdma_usart2_tx;
	DMA_HandleTypeDef hdma_usart2_rx;

	BmsData m_bmsData;
	BmsLogs m_bmsLogs;
	TypeBms m_thisBms;
	TypeMessageBms m_typeRequstTiny;

	HAL_StatusTypeDef parseDmaBuffer(TypeMessageBms t_typeMessage);
	HAL_StatusTypeDef readDmaBuffer(uint8_t * t_message, TypeMessageBms t_typeMessage);
	void parseTheMessage(uint8_t * t_message, TypeMessageBms t_typeMessageBms);

	bool checkCheckSumRecieve(uint8_t * t_message);
	uint16_t computeCrc16ModBus(uint8_t * puchMsg, uint8_t usDataLen);
	uint16_t computeCrc16JbdChina(uint8_t * puchMsg, uint8_t usDataLen);

	void goToConfig(void);
	void eraseBmsLogs(void);

	void sendRequestMessage();
	void requstLogs(void);
	float converUint32ToFloat(uint32_t number);

	//GET functions
	BmsData getBmsData(void);
	BmsLogs getBmsLogs(void);
};

#endif /* BMS_HPP_ */

#endif
